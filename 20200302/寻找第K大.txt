题目描述：有一个整数数组，请你根据快速排序的思路，找出数组中第K大的数。
	给定一个整数数组a，同时给定它的大小n和要找的K（K在1--n之间），请返回第K大的数，保证答案存在。
测试样例：
	[1,3,5,2,2],5,3
	返回：2
public class Finder {
    public int findKth(int[] a,int n,int K){
        return findKth(a,0,n-1,K);
    }
    public int findKth(int[] a,int left,int right,int k){
        int part = partion(a,left,right);
        if (part - left + 1 == k){
            return a[part];//若 k = part，则说明这个位置的值就是要找的值
        }else if (part - left + 1 > k){
            return findKth(a,left,part-1,k);// k 在前半段，所以就删掉后半段，接着找
        }else {
            return findKth(a,part+1,left,k - part + left -1);// k 在后半段，删掉前半段，k也要发生变化
        }
    }
    //按从大到小的顺序排
    public int partion(int[] a,int left,int right){
        int tmp = a[left];
        while (left < right){
            while (left < right && tmp >= right){
                right--;
            }
            a[left] = a[right];
            while (left < right && tmp <= left){
                left++;
            }
            a[right] = a[left];
        }
        a[left] = tmp;
        return left;
    }
}
